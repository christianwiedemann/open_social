<?php

/**
 * @file
 * The Social Event Max Enroll module.
 */

use Drupal\views\ViewExecutable;
use Drupal\views\Plugin\views\cache\CachePluginBase;
use Drupal\node\Entity\Node;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_views_post_render().
 *
 * Alter "Event enrollments" views. Add number of places left.
 */
function social_event_max_enroll_views_post_render(ViewExecutable $view, &$output, CachePluginBase $cache) {
  if ($view->id() === 'event_enrollments' && $view->current_display === 'event_enrollments' && isset($output['#rows']) && !empty($view->args[0])) {
    $nid = $view->args[0];
    $node = Node::load($nid);
    $event_max_enroll_service = \Drupal::service('social_event_max_enroll.service');

    // Add places left counter to the block title.
    if ($event_max_enroll_service->isEnabled($node)) {
      // Count how many places left.
      $left = $event_max_enroll_service->getEnrollmentsLeft($node);

      if ($left > 0) {
        $title_suffix = \Drupal::translation()->formatPlural($left, '(1 place left)', '(@count places left)');
      }
      else {
        $title_suffix = t('(No places left)');
      }

      $view->header['result']->options['content'] .= ' ' . $title_suffix;
    }
  }
}

/**
 * Implements hook_form_alter().
 *
 * Check and display "Allow anonymous enrollments" checkbox for public events.
 */
function social_event_max_enroll_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $event_forms = [
    'node_event_form',
    'node_event_edit_form',
  ];

  if (in_array($form_id, $event_forms)) {
    $config = \Drupal::config('social_event_max_enroll.settings');
    // Hide checkbox if feature is disabled globally.
    $form['field_event_max_enroll']['#access'] = $config->get('max_enroll');
    $form['field_event_max_enroll_num']['#access'] = $config->get('max_enroll');

    // Show the checkbox only when max enroll is enabled.
    if ($config->get('max_enroll_required')) {
      $form['field_event_max_enroll']['widget']['value']['#default_value'] = TRUE;
      $form['field_event_max_enroll']['widget']['value']['#required'] = TRUE;
      $form['field_event_max_enroll_num']['widget'][0]['value']['#required'] = TRUE;
    }
    else {
      $form['field_event_max_enroll_num']['#states'] = [
        'visible' => [
          ':input[name="field_event_max_enroll[value]"]' => ['checked' => TRUE],
        ],
      ];
    }
  }
}

/**
 * Override variables for the social page hero data.
 */
function social_event_max_enroll_preprocess_page_hero_data(array &$variables) {
  $event_max_enroll_service = \Drupal::service('social_event_max_enroll.service');
  $node = $variables['node'];

  // Add places left counter to the hero block.
  if ($event_max_enroll_service->isEnabled($node)) {
    $total = $event_max_enroll_service->getEnrollmentsNumber($node);
    $left = $event_max_enroll_service->getEnrollmentsLeft($node);

    $variables['title_suffix'] = t('@total people have enrolled (@left places left)', [
      '@total' => $total,
      '@left' => $left,
    ]);
  }
}
